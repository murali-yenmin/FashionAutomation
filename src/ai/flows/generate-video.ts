// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for generating a video from an image.
 *
 * - generateVideo - The main function to initiate the video generation process.
 * - GenerateVideoInput - The input type for the generateVideo function.
 * - GenerateVideoOutput - The return type for the generateVideo function.
 */

import {ai} from '@/ai/genkit';
import {googleAI} from '@genkit-ai/googleai';
import {z} from 'genkit';
import {MediaPart} from 'genkit/model';

const GenerateVideoInputSchema = z.object({
  imageDataUri: z
    .string()
    .describe(
      "An image to generate a video from, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  prompt: z
    .string()
    .optional()
    .describe('A prompt to guide the video generation.'),
});
export type GenerateVideoInput = z.infer<typeof GenerateVideoInputSchema>;

const GenerateVideoOutputSchema = z.object({
  videoDataUri: z
    .string()
    .describe('The generated video as a data URI in base64 format.'),
});
export type GenerateVideoOutput = z.infer<typeof GenerateVideoOutputSchema>;

export async function generateVideo(
  input: GenerateVideoInput
): Promise<GenerateVideoOutput> {
  return generateVideoFlow(input);
}

const generateVideoFlow = ai.defineFlow(
  {
    name: 'generateVideoFlow',
    inputSchema: GenerateVideoInputSchema,
    outputSchema: GenerateVideoOutputSchema,
  },
  async input => {
    const {imageDataUri, prompt} = input;

    const analysisPrompt = `Analyze this image and create a 5-second video plan. Describe camera movements and environmental effects to make it dynamic and engaging.
${prompt ? `Incorporate this user request: ${prompt}` : ''}
`;

    let {operation} = await ai.generate({
      model: googleAI.model('veo-2.0-generate-001'),
      prompt: [
        {
          media: {
            url: imageDataUri,
          },
        },
        {
          text: analysisPrompt,
        },
      ],
      config: {
        durationSeconds: 5,
        aspectRatio: '16:9',
        personGeneration: 'allow_adult',
      },
    });

    if (!operation) {
      throw new Error('Expected the model to return an operation');
    }

    // Wait until the operation completes.
    while (!operation.done) {
      operation = await ai.checkOperation(operation);
      // Sleep for 5 seconds before checking again.
      await new Promise(resolve => setTimeout(resolve, 5000));
    }

    if (operation.error) {
      throw new Error('failed to generate video: ' + operation.error.message);
    }

    const video = operation.output?.message?.content.find(p => !!p.media);
    if (!video || !video.media?.url) {
      throw new Error('Failed to find the generated video');
    }

    // The URL from the VEO API is a temporary download link, so we need to fetch it
    // and convert it to a data URI to send back to the client.
    const videoDataUri = await convertUrlToDataUri(video.media.url);

    return {videoDataUri};
  }
);

async function convertUrlToDataUri(url: string): Promise<string> {
  const fetch = (await import('node-fetch')).default;
  const response = await fetch(
    `${url}&key=${process.env.GEMINI_API_KEY}`
  );
  if (!response.ok) {
    throw new Error(`Failed to fetch video: ${response.statusText}`);
  }
  const arrayBuffer = await response.arrayBuffer();
  const buffer = Buffer.from(arrayBuffer);
  const contentType = response.headers.get('content-type') || 'video/mp4';
  return `data:${contentType};base64,${buffer.toString('base64')}`;
}
